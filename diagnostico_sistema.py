#!/usr/bin/env python3
"""
Script de Diagn√≥stico del Sistema - StockPrep Pro v2.0
Verifica que todos los componentes est√©n funcionando correctamente
"""

import sys
import os
from pathlib import Path
from datetime import datetime

# A√±adir src al path
sys.path.append('src')

def print_header(title):
    """Imprime un encabezado formateado"""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")

def check_dependencies():
    """Verifica las dependencias del sistema"""
    print_header("VERIFICACI√ìN DE DEPENDENCIAS")
    
    dependencies = [
        ('tkinter', 'Interfaz gr√°fica b√°sica'),
        ('PIL', 'Procesamiento de im√°genes'),
        ('torch', 'PyTorch para Florence-2'),
        ('transformers', 'Modelos de Hugging Face'),
        ('yake', 'Extracci√≥n de keywords'),
        ('sqlite3', 'Base de datos'),
        ('pathlib', 'Manejo de rutas'),
        ('json', 'Procesamiento JSON'),
        ('csv', 'Exportaci√≥n CSV')
    ]
    
    results = []
    for dep, desc in dependencies:
        try:
            __import__(dep)
            print(f"‚úÖ {dep:<15} - {desc}")
            results.append(True)
        except ImportError:
            print(f"‚ùå {dep:<15} - {desc} (FALTANTE)")
            results.append(False)
    
    # Verificar dependencias opcionales
    try:
        import PySide6
        print(f"‚úÖ {'PySide6':<15} - Interfaz moderna (OPCIONAL)")
    except ImportError:
        print(f"‚ö†Ô∏è {'PySide6':<15} - Interfaz moderna (OPCIONAL - No instalado)")
    
    return all(results)

def check_core_modules():
    """Verifica los m√≥dulos del core"""
    print_header("VERIFICACI√ìN DE M√ìDULOS DEL CORE")
    
    modules = [
        ('core.sqlite_database', 'SQLiteImageDatabase'),
        ('core.model_manager', 'Florence2Manager'),
        ('core.image_processor', 'ImageProcessor'),
        ('utils.keyword_extractor', 'KeywordExtractor'),
        ('output.output_handler_v2', 'OutputHandlerV2')
    ]
    
    results = []
    for module, class_name in modules:
        try:
            mod = __import__(module, fromlist=[class_name])
            cls = getattr(mod, class_name)
            print(f"‚úÖ {module:<25} - {class_name}")
            results.append(True)
        except (ImportError, AttributeError) as e:
            print(f"‚ùå {module:<25} - {class_name} (ERROR: {e})")
            results.append(False)
    
    return all(results)

def check_gui_modules():
    """Verifica los m√≥dulos de GUI"""
    print_header("VERIFICACI√ìN DE M√ìDULOS GUI")
    
    gui_modules = [
        ('gui.inicio_gui', 'StockPrepStartupApp'),
        ('gui.modern_gui_stockprep', 'StockPrepApp'),
        ('gui.database_gui', 'DatabaseManagerApp')
    ]
    
    results = []
    for module, class_name in gui_modules:
        try:
            mod = __import__(module, fromlist=[class_name])
            cls = getattr(mod, class_name)
            print(f"‚úÖ {module:<25} - {class_name}")
            results.append(True)
        except (ImportError, AttributeError) as e:
            print(f"‚ùå {module:<25} - {class_name} (ERROR: {e})")
            results.append(False)
    
    return all(results)

def check_database():
    """Verifica la base de datos"""
    print_header("VERIFICACI√ìN DE BASE DE DATOS")
    
    try:
        from core.sqlite_database import SQLiteImageDatabase
        
        # Crear instancia de prueba
        db = SQLiteImageDatabase()
        print(f"‚úÖ Base de datos inicializada: {db.db_path}")
        
        # Verificar que el archivo existe
        db_path = Path(db.db_path)
        if db_path.exists():
            size = db_path.stat().st_size
            print(f"‚úÖ Archivo de BD existe: {size} bytes")
        else:
            print(f"‚ö†Ô∏è Archivo de BD no existe (se crear√° al usarse)")
        
        # Probar estad√≠sticas
        stats = db.obtener_estadisticas_globales()
        print(f"‚úÖ Estad√≠sticas obtenidas: {stats.get('total_imagenes_procesadas', 0)} im√°genes")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en base de datos: {e}")
        return False

def check_files():
    """Verifica archivos importantes"""
    print_header("VERIFICACI√ìN DE ARCHIVOS")
    
    important_files = [
        ('main.py', 'Archivo principal'),
        ('stockprep_icon.ico', 'Icono de la aplicaci√≥n'),
        ('src/gui/inicio_gui.py', 'GUI de inicio'),
        ('src/gui/modern_gui_stockprep.py', 'GUI de reconocimiento'),
        ('src/gui/database_gui.py', 'GUI de base de datos'),
        ('src/core/model_manager.py', 'Gestor de modelo'),
        ('src/core/sqlite_database.py', 'Base de datos'),
        ('src/output/output_handler_v2.py', 'Manejador de salidas')
    ]
    
    results = []
    for file_path, desc in important_files:
        path = Path(file_path)
        if path.exists():
            size = path.stat().st_size
            print(f"‚úÖ {file_path:<35} - {desc} ({size} bytes)")
            results.append(True)
        else:
            print(f"‚ùå {file_path:<35} - {desc} (FALTANTE)")
            results.append(False)
    
    return all(results)

def check_model_compatibility():
    """Verifica compatibilidad del modelo"""
    print_header("VERIFICACI√ìN DE COMPATIBILIDAD DEL MODELO")
    
    try:
        import torch
        print(f"‚úÖ PyTorch versi√≥n: {torch.__version__}")
        
        # Verificar CUDA
        if torch.cuda.is_available():
            gpu_count = torch.cuda.device_count()
            current_device = torch.cuda.current_device()
            gpu_name = torch.cuda.get_device_name(current_device)
            print(f"‚úÖ CUDA disponible: {gpu_count} GPU(s)")
            print(f"‚úÖ GPU actual: {gpu_name}")
        else:
            print(f"‚ö†Ô∏è CUDA no disponible - Se usar√° CPU")
        
        # Verificar transformers
        import transformers
        print(f"‚úÖ Transformers versi√≥n: {transformers.__version__}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando modelo: {e}")
        return False

def run_basic_functionality_test():
    """Ejecuta una prueba b√°sica de funcionalidad"""
    print_header("PRUEBA B√ÅSICA DE FUNCIONALIDAD")
    
    try:
        # Probar base de datos
        from core.sqlite_database import SQLiteImageDatabase
        db = SQLiteImageDatabase()
        print("‚úÖ Base de datos: OK")
        
        # Probar extractor de keywords
        from utils.keyword_extractor import KeywordExtractor
        extractor = KeywordExtractor()
        keywords = extractor.extract_keywords("Esta es una prueba de extracci√≥n de palabras clave")
        print(f"‚úÖ Extractor de keywords: {len(keywords)} keywords extra√≠das")
        
        # Probar output handler
        from output.output_handler_v2 import OutputHandlerV2
        handler = OutputHandlerV2()
        print("‚úÖ Output handler: OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de funcionalidad: {e}")
        import traceback
        traceback.print_exc()
        return False

def generate_report():
    """Genera un reporte completo del sistema"""
    print_header("REPORTE DEL SISTEMA")
    
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üêç Python: {sys.version}")
    print(f"üíª Plataforma: {sys.platform}")
    print(f"üìÅ Directorio actual: {os.getcwd()}")
    print(f"üõ£Ô∏è Python path: {sys.executable}")

def main():
    """Funci√≥n principal de diagn√≥stico"""
    print("üöÄ StockPrep Pro v2.0 - Diagn√≥stico del Sistema")
    print(f"Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Ejecutar todas las verificaciones
    tests = [
        ("Dependencias", check_dependencies),
        ("M√≥dulos Core", check_core_modules),
        ("M√≥dulos GUI", check_gui_modules),
        ("Base de Datos", check_database),
        ("Archivos", check_files),
        ("Compatibilidad Modelo", check_model_compatibility),
        ("Funcionalidad B√°sica", run_basic_functionality_test)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error ejecutando {test_name}: {e}")
            results.append((test_name, False))
    
    # Generar reporte final
    generate_report()
    
    print_header("RESUMEN FINAL")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    total = len(results)
    percentage = (passed / total) * 100
    
    print(f"\nüìä Resultado: {passed}/{total} pruebas pasaron ({percentage:.1f}%)")
    
    if percentage == 100:
        print("üéâ ¬°Excelente! El sistema est√° completamente funcional.")
    elif percentage >= 80:
        print("‚úÖ El sistema est√° mayormente funcional. Revisa los errores menores.")
    elif percentage >= 60:
        print("‚ö†Ô∏è El sistema tiene algunos problemas. Revisa los errores.")
    else:
        print("‚ùå El sistema tiene problemas significativos. Revisa la instalaci√≥n.")
    
    print(f"\nPara ejecutar la aplicaci√≥n: python main.py")
    print(f"Para m√°s ayuda, consulta: README_NUEVA_ESTRUCTURA.md")

if __name__ == "__main__":
    main() 