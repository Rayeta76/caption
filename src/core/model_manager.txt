"""
Gestor del modelo Florence-2 (Versi√≥n parcheada para RTX 4090)
"""
import torch
import os
from transformers import AutoModelForCausalLM, AutoProcessor
from pathlib import Path
from unittest.mock import patch
from transformers.dynamic_module_utils import get_imports
import gc

# Activar optimizaciones de Tensor Cores (TF32) para RTX 4090
torch.backends.cuda.matmul.allow_tf32 = True
torch.backends.cudnn.allow_tf32 = True

class Florence2Manager:
    def __init__(self):
        self.model = None
        self.processor = None
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self.model_id = str(Path("E:/Proyectos/Caption/models/Florence-2-large-ft-safetensors").resolve())

    def fixed_get_imports(self, filename):
        if not str(filename).endswith("modeling_florence2.py"):
            return get_imports(filename)
        imports = get_imports(filename)
        if "flash_attn" in imports:
            imports.remove("flash_attn")
        return imports

    def cargar_modelo(self, callback=None):
        try:
            torch.backends.cuda.matmul.allow_tf32 = True
            torch.backends.cudnn.allow_tf32 = True

            if callback:
                callback("üß† Cargando modelo desde carpeta local...")

            with patch("transformers.dynamic_module_utils.get_imports", self.fixed_get_imports):
                self.processor = AutoProcessor.from_pretrained(
                    self.model_id,
                    trust_remote_code=True
                )
                self.model = AutoModelForCausalLM.from_pretrained(
                    self.model_id,
                    trust_remote_code=True,
                    use_safetensors=True,
                    torch_dtype=torch.float16 if self.device == "cuda" else torch.float32,
                    device_map="auto"
                ).to(self.device)

                self.model.eval()
                torch.cuda.empty_cache()

                if callback:
                    callback("‚úÖ Modelo cargado correctamente")
                    callback(f"üíæ Uso de VRAM: {torch.cuda.memory_allocated()/1024**3:.1f}GB")
                return True

        except Exception as e:
            if callback:
                callback(f"‚ùå Error al cargar modelo: {str(e)}")
            return False

    def descargar_modelo(self):
        if self.model:
            del self.model
            self.model = None
        if self.processor:
            del self.processor
            self.processor = None
        if self.device == "cuda":
            torch.cuda.empty_cache()
        gc.collect()

    def obtener_uso_memoria(self):
        if self.device == "cuda":
            allocated = torch.cuda.memory_allocated() / 1024**3
            reserved = torch.cuda.memory_reserved() / 1024**3
            return f"GPU: {allocated:.1f}GB usado de {reserved:.1f}GB reservado"
        return "Modo CPU"